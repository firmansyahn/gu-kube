apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: prometheus
  labels: &Labels
    app: prometheus
    #app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: monitoring
    sidecar.istio.io/inject: "true"
spec:
  replicas: 1
  serviceName: prometheus
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: "RollingUpdate"
  selector:
    matchLabels: *Labels
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/includeInboundPorts: ""   # do not intercept any inbound ports
        traffic.sidecar.istio.io/includeOutboundIPRanges: ""  # do not intercept any outbound traffic
        proxy.istio.io/config: |  # configure an env variable `OUTPUT_CERTS` to write certificates to the given folder
          proxyMetadata:
            OUTPUT_CERTS: /etc/istio-output-certs
        sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-output-certs"}]' # mount the shared volume at sidecar proxy
      labels: *Labels
    spec:
      securityContext:
        fsGroup: 1001001
      serviceAccountName: prometheus
      containers:
      - name: prometheus-server
        image: prom/prometheus:latest
        imagePullPolicy: "IfNotPresent"
        args:
        - --config.file=/prometheus/config/prometheus.yaml
        - --storage.tsdb.path=/prometheus/data
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        - --web.enable-lifecycle
        ports:
        - name: http-prom
          containerPort: 9090
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        # based on 10 running nodes with 30 pods each
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: config-file
          mountPath: /prometheus/config
        - name: istio-certs
          mountPath: /etc/prom-certs/
        - name: storage-tsdb
          mountPath: /prometheus/data
          subPath: ""
      terminationGracePeriodSeconds: 300
      volumes:
      - name: config-file
        configMap:
          name: prometheus-config
      - name: istio-certs
        emptyDir:
          medium: Memory
      - name: storage-tsdb
        persistentVolumeClaim:
          claimName: data-prometheus
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - prometheus
            topologyKey: "kubernetes.io/hostname"
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: monitoring
spec:
  clusterIP: None
  selector:
    #Should same with StatefullSet spec.selector
    app: prometheus
  ports:
  - name: http-prom
    port: 9090
    protocol: TCP
    targetPort: 9090
  sessionAffinity: ClientIP
---