apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: prometheus
  labels:
    app.kubernetes.io/component: prometheus
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-hostpath
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: prometheus
  labels: &Labels
    app.kubernetes.io/component: prometheus
    k8s-app: prometheus
    #app.kubernetes.io/name: $APP_INSTANCE_NAME
spec:
  serviceName: prometheus
  replicas: 1
  podManagementPolicy: "Parallel"
  updateStrategy:
    type: "RollingUpdate"
  selector:
    matchLabels: *Labels
  template:
    metadata:
      labels: *Labels
    spec:
      securityContext:
        fsGroup: 2001
      serviceAccountName: prometheus
      containers:
      - name: prometheus-server
        image: prom/prometheus:latest
        imagePullPolicy: "IfNotPresent"
        args:
        - --config.file=/prometheus/config/prometheus.yaml
        - --storage.tsdb.path=/prometheus/data
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        - --web.enable-lifecycle
        ports:
        - name: http-prometheus
          containerPort: 9090
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        # based on 10 running nodes with 30 pods each
        resources:
          requests:
            cpu: 200m
            memory: 1000Mi
        volumeMounts:
        - name: config-volume
          mountPath: /prometheus/config
        - name: storage-tsdb
          mountPath: /prometheus/data
          subPath: ""
      terminationGracePeriodSeconds: 300
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: storage-tsdb
        persistentVolumeClaim:
          claimName: prometheus-data
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - prometheus
            topologyKey: "kubernetes.io/hostname"
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    k8s-app: prometheus
    app.kubernetes.io/component: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - protocol: TCP
    port: 9090
    targetPort: http-prometheus
  #externalTrafficPolicy: Local
  sessionAffinity: ClientIP
  #type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app.kubernetes.io/component: prometheus
spec:
  ingressClassName: nginx
  rules:
  - host: prometheus.cluster.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
---